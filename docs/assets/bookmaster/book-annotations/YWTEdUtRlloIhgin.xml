<?xml version="1.0" encoding="UTF-8"?><xfdf xmlns="http://ns.adobe.com/xfdf/" xml:space="preserve"><fields/><annots><highlight page="14" rect="56.641,64.096,467.760,151.608" color="#FFCD45" flags="print" name="fe710493-8c79-b588-1f6d-ea27d8cc1112" title="Guest" subject="高亮" date="D:20250324222616+08'00'" creationdate="D:20250324222616+08'00'" coords="76.69043999999988,151.60837500000002,467.64036,151.60837500000002,76.69043999999988,141.60480000000007,467.64036,141.60480000000007,56.65091999999987,135.78037874999995,467.64035999999993,135.78037874999995,56.65091999999987,125.4390975,467.64035999999993,125.4390975,56.64095999999989,120.30253874999994,467.6304,120.30253874999994,56.64095999999989,109.945695,467.6304,109.945695,56.64095999999992,105.17485499999998,467.75987999999995,105.17485499999998,56.64095999999992,95.17128000000002,467.75987999999995,95.17128000000002,56.640959999999865,89.577495,467.64035999999993,89.577495,56.640959999999865,79.57391999999993,467.64035999999993,79.57391999999993,56.64095999999989,74.09965499999998,116.5204799999999,74.09965499999998,56.64095999999989,64.09608000000003,116.5204799999999,64.09608000000003"><contents>主题是一个逻辑上的概念，它还可以细分为多个分区，一个分区只属于单个主题，很多时
候也会把分区称为主题分区（Topic-Partition）。同一主题下的不同分区包含的消息是不同的，
分区在存储层面可以看作一个可追加的日志（Log）文件，消息在被追加到分区日志文件的时
候都会分配一个特定的偏移量（offset）。offset 是消息在分区中的唯一标识，Kafka 通过它来保
证消息在分区内的顺序性，不过 offset 并不跨越分区，也就是说，Kafka 保证的是分区有序而不
是主题有序。</contents></highlight><highlight page="13" rect="87.969,121.882,151.921,140.029" color="#FFCD45" flags="print" name="40c21eaf-7fea-059e-f32b-5cfb47585a05" title="Guest" subject="高亮" date="D:20250324222824+08'00'" creationdate="D:20250324222824+08'00'" coords="87.96948,140.02883999999995,151.9212,140.02883999999995,87.96948,121.88231999999994,151.9212,121.88231999999994"><contents>基本概念</contents></highlight><highlight page="16" rect="56.650,324.480,467.759,365.439" color="#FFCD45" flags="print" name="be1a4184-f676-0fa0-033b-f2e7b0d362ce" title="Guest" subject="高亮" date="D:20250324223557+08'00'" creationdate="D:20250324223557+08'00'" coords="76.67999999999999,365.439375,467.6498400000001,365.439375,76.67999999999999,355.4358,467.6498400000001,355.4358,56.65043999999996,349.96153499999997,467.7594,349.96153499999997,56.65043999999996,339.95796,467.7594,339.95796,56.65043999999996,334.483695,276.48756000000003,334.483695,56.65043999999996,324.48012,276.48756000000003,324.48012"><contents>Kafka 消费端也具备一定的容灾能力。Consumer 使用拉（Pull）模式从服务端拉取消息，
并且保存消费的具体位置，当消费者宕机后恢复上线时可以根据之前保存的消费位置重新拉取
需要的消息进行消费，这样就不会造成消息丢失。</contents></highlight><highlight page="16" rect="56.650,289.704,467.650,315.538" color="#FFCD45" flags="print" name="e6ef16cf-1a69-65d2-fdd0-62d3783c7219" title="Guest" subject="高亮" date="D:20250324224344+08'00'" creationdate="D:20250324224344+08'00'" coords="308.28983999999997,315.53821875,467.64984000000004,315.53821875,308.28983999999997,305.181375,467.64984000000004,305.181375,56.65043999999996,300.06037875,321.48684,300.06037875,56.65043999999996,289.703535,321.48684,289.703535"><contents>所有与 leader 副本保持一定程度同步
的副本（包括 leader 副本在内）组成 ISR（In-Sync Replicas）</contents></highlight><highlight page="16" rect="56.640,259.332,467.759,300.060" color="#FFCD45" flags="print" name="2fbc866b-e1cf-1e87-e995-bb7a65abfb41" title="Guest" subject="高亮" date="D:20250324224415+08'00'" creationdate="D:20250324224411+08'00'" coords="321.12827999999996,300.06037875,467.64984000000004,300.06037875,321.12827999999996,289.703535,467.64984000000004,289.703535,56.65043999999996,284.813175,467.7594,284.813175,56.65043999999996,274.8096,467.7594,274.8096,56.640479999999954,269.335335,367.55184,269.335335,56.640479999999954,259.33176,367.55184,259.33176"><contents>，ISR 集合是 AR集合中的一个子
集。消息会先发送到 leader 副本，然后 follower 副本才能从 leader 副本中拉取消息进行同步，
同步期间内 follower 副本相对于 leader 副本而言会有一定程度的滞后。</contents></highlight><highlight page="16" rect="56.640,163.228,467.640,188.829" color="#FFCD45" flags="print" name="6e194f2f-f2b2-eff7-78f0-48b53909fb14" title="Guest" subject="高亮" date="D:20250324224626+08'00'" creationdate="D:20250324224624+08'00'" coords="76.67003999999989,188.8286549999999,467.6398799999999,188.8286549999999,76.67003999999989,178.82507999999996,467.6398799999999,178.82507999999996,56.64047999999977,173.23129499999993,292.4335199999998,173.23129499999993,56.64047999999977,163.22771999999998,292.4335199999998,163.22771999999998"><contents>leader 副本负责维护和跟踪 ISR集合中所有 follower 副本的滞后状态，当 follower 副本落后
太多或失效时，leader 副本会把它从 ISR集合中剔除。</contents></highlight><highlight page="16" rect="56.640,147.750,472.680,173.231" color="#FFCD45" flags="print" name="649c8fb8-5efc-5ef3-70ce-85fce4b14f7c" title="Guest" subject="高亮" date="D:20250324224653+08'00'" creationdate="D:20250324224646+08'00'" coords="290.9893199999998,173.23129499999993,472.6796399999999,173.23129499999993,290.9893199999998,163.22771999999998,472.6796399999999,163.22771999999998,56.64047999999984,157.75345499999997,359.6435999999999,157.75345499999997,56.64047999999984,147.74987999999996,359.6435999999999,147.74987999999996"><contents>如果OSR 集合中有 follower 副本“追上”
了 leader 副本，那么 leader 副本会把它从 OSR集合转移至 ISR集合。</contents></highlight><highlight page="17" rect="56.621,322.082,467.690,378.208" color="#FFCD45" flags="print" name="66010c95-ba51-c6e9-f1c6-b8f98f09ff11" title="Guest" subject="高亮" date="D:20250324225045+08'00'" creationdate="D:20250324225045+08'00'" coords="76.67999999999999,378.208125,467.68968000000007,378.208125,76.67999999999999,367.812375,467.68968000000007,367.812375,56.63052000000001,363.04153499999995,467.6299200000001,363.04153499999995,56.63052000000001,353.03796,467.6299200000001,353.03796,56.63052000000001,347.563695,467.60004000000015,347.563695,56.63052000000001,337.56012,467.60004000000015,337.56012,56.62055999999996,332.085855,317.38331999999997,332.085855,56.62055999999996,322.08227999999997,317.38331999999997,322.08227999999997"><contents>LEO是 Log End Offset 的缩写，它标识当前日志文件中下一条待写入消息的 offset，图 1-4
中 offset 为 9 的位置即为当前日志文件的 LEO，LEO 的大小相当于当前日志分区中最后一条消
息的 offset 值加 1。分区 ISR 集合中的每个副本都会维护自身的 LEO，而 ISR 集合中最小的 LEO
即为分区的HW，对消费者而言只能消费HW之前的消息。</contents></highlight><highlight page="18" rect="56.640,428.758,467.640,454.239" color="#FFCD45" flags="print" name="aef3a2cf-0dde-8efe-0290-63aa5ef11ba9" title="Guest" subject="高亮" date="D:20250324225730+08'00'" creationdate="D:20250324225730+08'00'" coords="76.67999999999999,454.239375,467.63988000000006,454.239375,76.67999999999999,444.2358,467.63988000000006,444.2358,56.64047999999998,438.761535,96.48047999999999,438.761535,56.64047999999998,428.75796,96.48047999999999,428.75796"><contents>在消息写入 leader 副本之后，follower 副本会发送拉取请求来拉取消息 3 和消息 4 以进行消
息同步。</contents></highlight><highlight page="14" rect="56.651,160.200,467.650,200.839" color="#FFCD45" flags="print" name="a3eef82b-7fa0-05f0-b24d-3b413f6ce46f" title="Guest" subject="高亮" date="D:20250324232003+08'00'" creationdate="D:20250324232003+08'00'" coords="76.67003999999987,200.83921875,467.65031999999997,200.83921875,76.67003999999987,190.4679375,467.65031999999997,190.4679375,56.65091999999987,185.681535,467.6503199999999,185.681535,56.65091999999987,175.67795999999998,467.6503199999999,175.67795999999998,56.65091999999987,170.20369499999998,346.5665999999999,170.20369499999998,56.65091999999987,160.20011999999997,346.5665999999999,160.20011999999997"><contents>在Kafka 中还有两个特别重要的概念—主题（Topic）与分区（Partition）。Kafka 中的消
息以主题为单位进行归类，生产者负责将消息发送到特定的主题（发送到 Kafka 集群中的每一
条消息都要指定一个主题），而消费者负责订阅主题并进行消费。</contents></highlight><highlight page="54" rect="56.621,105.528,472.680,239.593" color="#FFCD45" flags="print" name="52eed087-e702-7f88-657b-47c3adfac1e7" title="Guest" subject="高亮" date="D:20250325000316+08'00'" creationdate="D:20250325000316+08'00'" coords="76.68048000000003,239.59333500000002,467.74992000000015,239.59333500000002,76.68048000000003,229.58975999999996,467.74992000000015,229.58975999999996,56.64096000000002,223.995975,467.74992000000015,223.995975,56.64096000000002,213.99239999999998,467.74992000000015,213.99239999999998,56.64096000000002,208.16797874999997,472.68012000000004,208.16797874999997,56.64096000000002,197.81113500000004,472.68012000000004,197.81113500000004,56.640959999999986,192.6512325,467.75988000000007,192.6512325,56.640959999999986,182.60563875000003,467.75988000000007,182.60563875000003,56.640959999999986,177.562455,467.63040000000007,177.562455,56.640959999999986,167.55888000000004,467.63040000000007,167.55888000000004,56.630999999999986,162.08461500000004,467.7399600000001,162.08461500000004,56.630999999999986,152.08104000000003,467.7399600000001,152.08104000000003,56.630999999999986,146.60677500000008,467.46108,146.60677500000008,56.630999999999986,136.60320000000002,467.46108,136.60320000000002,56.630999999999986,130.62035250000008,467.62044000000003,130.62035250000008,56.630999999999986,120.57475875,467.62044000000003,120.57475875,56.621039999999894,115.53157499999998,176.4995999999999,115.53157499999998,56.621039999999894,105.52800000000002,176.4995999999999,105.52800000000002"><contents>Kafka 可以保证同一个分区中的消息是有序的。如果生产者按照一定的顺序发送消息，那
么这些消息也会顺序地写入分区，进而消费者也可以按照同样的顺序消费它们。对于某些应用
来说，顺序性非常重要，比如MySQL 的 binlog 传输，如果出现错误就会造成非常严重的后果。
如果将 acks 参数配置为非零值，并且 max.in.flight.requests.per.connection 参数
配置为大于 1 的值，那么就会出现错序的现象：如果第一批次消息写入失败，而第二批次消息
写入成功，那么生产者会重试发送第一批次的消息，此时如果第一批次的消息写入成功，那么
这两个批次的消息就出现了错序。一般而言，在需要保证消息顺序的场合建议把参数
max.in.flight.requests.per.connection 配置为 1，而不是把 acks 配置为 0，不过
这样也会影响整体的吞吐。</contents></highlight><highlight page="145" rect="56.640,235.361,469.791,292.136" color="#FFCD45" flags="print" name="08ee8bef-4943-c714-8b39-46f4ccd485e0" title="Guest" subject="高亮" date="D:20250325002304+08'00'" creationdate="D:20250325002304+08'00'" coords="76.67999999999999,292.13605875,469.7912400000001,292.13605875,76.67999999999999,281.7947775,469.7912400000001,281.7947775,56.64047999999998,276.65821875,467.69964,276.65821875,56.64047999999998,266.3169375,467.69964,266.3169375,56.64047999999991,261.18037875,467.63987999999995,261.18037875,56.64047999999991,250.99472249999997,467.63987999999995,250.99472249999997,56.64047999999991,245.70253874999997,341.52635999999995,245.70253874999997,56.64047999999991,235.36125749999997,341.52635999999995,235.36125749999997"><contents>为了能够有效地治理负载失衡的情况，Kafka 引入了优先副本（preferred replica）的概念。
所谓的优先副本是指在 AR 集合列表中的第一个副本。比如上面主题 topic-partitions 中分区 0
的AR集合列表（Replicas）为[1,2,0]，那么分区 0 的优先副本即为 1。理想情况下，优先副
本就是该分区的 leader 副本，所以也可以称之为 preferred leader。</contents></highlight><highlight page="148" rect="56.631,317.769,467.739,373.856" color="#FFCD45" flags="print" name="abe6fe26-8abe-b620-feb6-c050ed6caa83" title="Guest" subject="高亮" date="D:20250325004502+08'00'" creationdate="D:20250325004502+08'00'" coords="76.68000000000008,373.85605875,467.62992000000014,373.85605875,76.68000000000008,363.77155874999994,467.62992000000014,363.77155874999994,56.63052000000005,358.37821875,467.70959999999997,358.37821875,56.63052000000005,348.29371875,467.70959999999997,348.29371875,56.63052000000001,343.25053499999996,467.73948000000007,343.25053499999996,56.63052000000001,333.24695999999994,467.73948000000007,333.24695999999994,56.63052000000001,327.77269499999994,126.47004000000001,327.77269499999994,56.63052000000001,317.76912,126.47004000000001,317.76912"><contents>在实际生产环境中，一般使用 path-to-json-file 参数来分批、手动地执行优先副本
的选举操作。尤其是在应对大规模的 Kafka 集群时，理应杜绝采用非 path-to-json-file
参数的选举操作方式。同时，优先副本的选举操作也要注意避开业务高峰期，以免带来性能方
面的负面影响。</contents></highlight><highlight page="407" rect="56.630,58.524,467.619,85.183" color="#FFCD45" flags="print" name="31cfbb3d-df9f-3893-677f-509cf6920ce3" title="Guest" subject="高亮" date="D:20250325010759+08'00'" creationdate="D:20250325010759+08'00'" coords="76.66956000000008,85.18284000000017,467.6194800000001,85.18284000000017,76.66956000000008,75.07344000000023,467.6194800000001,75.07344000000023,56.63004000000009,68.88049875000024,467.6194800000001,68.88049875000024,56.63004000000009,58.52365500000019,467.6194800000001,58.52365500000019"><contents>消息顺序性：顾名思义，消息顺序性是指保证消息有序。这个功能有一个很常见的应用场
景就是 CDC（Change Data Chapture），以MySQL 为例，如果其传输的 binlog 的顺序出错，比</contents></highlight><highlight page="408" rect="56.640,564.000,467.639,589.959" color="#FFCD45" flags="print" name="a869cb37-9344-b023-fe10-734ade3ada8d" title="Guest" subject="高亮" date="D:20250325010810+08'00'" creationdate="D:20250325010810+08'00'" coords="56.64,589.959375,467.6394,589.959375,56.64,579.9558,467.6394,579.9558,56.64000000000007,574.003455,106.55952000000008,574.003455,56.64000000000007,563.99988,106.55952000000008,563.99988"><contents>如原本是先对一条数据加 1，然后乘以 2，发送错序之后就变成了先乘以 2 后加 1 了，造成了数
据不一致。</contents></highlight><highlight page="173" rect="56.640,203.882,467.749,229.364" color="#FFCD45" flags="print" name="484a46c4-52b5-c39a-c84c-dcaed97bfbd4" title="Guest" subject="高亮" date="D:20250325182845+08'00'" creationdate="D:20250325182845+08'00'" coords="146.87808,229.363695,467.74944000000005,229.363695,146.87808,219.36012,467.74944000000005,219.36012,56.64047999999998,213.885855,388.31843999999995,213.885855,56.64047999999998,203.88227999999998,388.31843999999995,203.88227999999998"><contents>每条消息在发送的时候会根据分区规则被追加到指定的分区中，分区中的
每条消息都会被分配一个唯一的序列号，也就是通常所说的偏移量（offset）</contents></highlight><highlight page="173" rect="126.600,153.508,362.632,163.865" color="#FFCD45" flags="print" name="1001f998-c45a-1cf6-eb6d-a5ac6251f2dd" title="Guest" subject="高亮" date="D:20250325182953+08'00'" creationdate="D:20250325182953+08'00'" coords="126.59951999999984,163.86517874999998,362.6315999999999,163.86517874999998,126.59951999999984,153.508335,362.6315999999999,153.508335"><contents>不考虑多副本的情况，一个分区对应一个日志（Log）</contents></highlight><highlight page="173" rect="56.621,122.553,467.739,163.865" color="#FFCD45" flags="print" name="f1078402-0133-8695-2bd5-1279714f371f" title="Guest" subject="高亮" date="D:20250325183512+08'00'" creationdate="D:20250325183512+08'00'" coords="372.7111199999999,163.86517874999998,467.6299199999999,163.86517874999998,372.7111199999999,153.508335,467.6299199999999,153.508335,56.6305199999998,148.38733875000003,467.7394799999999,148.38733875000003,56.6305199999998,138.03049499999997,467.7394799999999,138.03049499999997,56.62055999999982,132.90949875,396.4557599999998,132.90949875,56.62055999999982,122.55265499999996,396.4557599999998,122.55265499999996"><contents>为了防止 Log 过大，
Kafka 又引入了日志分段（LogSegment）的概念，将 Log 切分为多个 LogSegment，相当于一个
巨型文件被平均分配为多个相对较小的文件，这样也便于消息的维护和清理。</contents></highlight><highlight page="173" rect="56.611,76.703,467.700,117.432" color="#FFCD45" flags="print" name="9e848ce3-fd22-bc3f-8ef2-1fe80cf4d28a" title="Guest" subject="高亮" date="D:20250325183537+08'00'" creationdate="D:20250325183537+08'00'" coords="248.7091199999997,117.43165875,467.69964000000004,117.43165875,248.7091199999997,107.07481499999994,467.69964000000004,107.07481499999994,56.61059999999978,101.95381874999998,467.5502400000002,101.95381874999998,56.61059999999978,91.59697499999993,467.5502400000002,91.59697499999993,56.61059999999978,86.70661499999994,233.7292799999998,86.70661499999994,56.61059999999978,76.70303999999999,233.7292799999998,76.70303999999999"><contents>，Log 在物理上只以文件夹的形式存储，而每个
LogSegment 对应于磁盘上的一个日志文件和两个索引文件，以及可能的其他文件（比如以
“.txnindex”为后缀的事务索引文件）。</contents></highlight><highlight page="174" rect="174.119,351.852,422.511,362.209" color="#FFCD45" flags="print" name="b70a98b4-8d66-7cec-18d0-0404d35b3db6" title="Guest" subject="高亮" date="D:20250325183647+08'00'" creationdate="D:20250325183647+08'00'" coords="174.11868,362.20921875,422.51112,362.20921875,174.11868,351.852375,422.51112,351.852375"><contents>Log 对应了一个命名形式为&lt;topic&gt;-&lt;partition&gt;的文件夹。</contents></highlight><highlight page="174" rect="56.640,195.856,467.640,222.169" color="#FFCD45" flags="print" name="b8a39db5-5e3b-6434-0683-36db89c871f6" title="Guest" subject="高亮" date="D:20250325183713+08'00'" creationdate="D:20250325183713+08'00'" coords="129.59748,222.16921875000003,467.63988000000006,222.16921875000003,129.59748,211.81237499999997,467.63988000000006,211.81237499999997,56.64047999999998,206.21329875000004,247.07568000000003,206.21329875000004,56.64047999999998,195.85645499999998,247.07568000000003,195.85645499999998"><contents>加消息时是顺序写入的，只有最后一个 LogSegment 才能执行写入操作，在此
之前所有的 LogSegment 都不能写入数据。</contents></highlight><highlight page="174" rect="56.640,163.825,467.759,190.257" color="#FFCD45" flags="print" name="5946f880-f058-fc9c-f7f0-fcc4420288cb" title="Guest" subject="高亮" date="D:20250325183809+08'00'" creationdate="D:20250325183735+08'00'" coords="274.1967599999999,190.25737875000004,467.7593999999999,190.25737875000004,274.1967599999999,179.900535,467.7593999999999,179.900535,56.64047999999977,174.220845,459.24359999999984,174.220845,56.64047999999977,163.82509500000003,459.24359999999984,163.82509500000003"><contents>随着消息的不断写入，当 activeSegment 满足
一定的条件时，就需要创建新的 activeSegment，之后追加的消息将写入新的 activeSegment。</contents></highlight><highlight page="174" rect="56.631,112.710,472.670,139.493" color="#FFCD45" flags="print" name="0d350fb5-1bdd-dfb3-0252-9f10b668b052" title="Guest" subject="高亮" date="D:20250325183859+08'00'" creationdate="D:20250325183859+08'00'" coords="126.5895599999998,139.49281500000006,472.66967999999986,139.49281500000006,126.5895599999998,129.48924,472.66967999999986,129.48924,56.6305199999998,123.06721874999994,116.5100399999998,123.06721874999994,56.6305199999998,112.710375,116.5100399999998,112.710375"><contents>：偏移量索引文件（以“.index”为文件后缀）和时间戳索引文件（以“.timeindex”
为文件后缀）</contents></highlight><highlight page="174" rect="76.680,144.742,467.630,155.099" color="#FFCD45" flags="print" name="ee9b2059-891f-62fd-1c43-c410f9ffdedf" title="Guest" subject="高亮" date="D:20250325183904+08'00'" creationdate="D:20250325183904+08'00'" coords="76.67999999999978,155.09857875,467.62991999999986,155.09857875,76.67999999999978,144.74173500000006,467.62991999999986,144.74173500000006"><contents>为了便于消息的检索，每个 LogSegment 中的日志文件（以“.log”为文件后缀）都有对应</contents></highlight><highlight page="174" rect="56.631,129.489,126.470,139.493" color="#FFCD45" flags="print" name="81d525c4-d906-cd74-0f5c-7139a41a00ce" title="Guest" subject="高亮" date="D:20250325183907+08'00'" creationdate="D:20250325183907+08'00'" coords="56.6305199999998,139.49281500000006,126.47003999999981,139.49281500000006,56.6305199999998,129.48924,126.47003999999981,129.48924"><contents>的两个索引文件</contents></highlight><highlight page="174" rect="56.631,97.458,467.653,123.067" color="#FFCD45" flags="print" name="af0457a7-a2b2-7043-b7f9-2b50a7903eb5" title="Guest" subject="高亮" date="D:20250325184157+08'00'" creationdate="D:20250325184157+08'00'" coords="116.5100399999998,123.06721874999994,467.65279687499986,123.06721874999994,116.5100399999998,112.710375,467.65279687499986,112.710375,56.63051999999973,107.461455,161.98739999999972,107.461455,56.63051999999973,97.45787999999993,161.98739999999972,97.45787999999993"><contents>。每个 LogSegment 都有一个基准偏移量 baseOffset，用来表示当前 LogSegment
中第一条消息的 offset。</contents></highlight><highlight page="174" rect="224.745,97.458,297.702,107.461" color="#FFCD45" flags="print" name="a450702b-00e9-86df-f248-a15fe7c3b721" title="Guest" subject="高亮" date="D:20250325184206+08'00'" creationdate="D:20250325184206+08'00'" coords="224.74535999999978,107.461455,297.70235999999977,107.461455,224.74535999999978,97.45787999999993,297.70235999999977,97.45787999999993"><contents>64 位的长整型数</contents></highlight><highlight page="174" rect="56.621,64.723,467.739,107.461" color="#FFCD45" flags="print" name="ae46354d-3d4d-7287-b3ff-18dd317ca367" title="Guest" subject="高亮" date="D:20250325184240+08'00'" creationdate="D:20250325184240+08'00'" coords="307.66235999999975,107.461455,467.6199599999998,107.461455,307.66235999999975,97.45787999999993,467.6199599999998,97.45787999999993,56.62055999999975,91.50553500000001,467.7394799999999,91.50553500000001,56.62055999999975,81.50196000000005,467.7394799999999,81.50196000000005,56.62055999999982,75.07993875,427.89947999999987,75.07993875,56.62055999999982,64.72309499999994,427.89947999999987,64.72309499999994"><contents>日志文件和两个索引文件都是根据基
准偏移量（baseOffset）命名的，名称固定为 20 位数字，没有达到的位数则用 0 填充。比如第
一个 LogSegment 的基准偏移量为 0，对应的日志文件为 00000000000000000000.log。</contents></highlight><highlight page="175" rect="56.640,189.358,467.670,214.609" color="#FFCD45" flags="print" name="dd089b8f-989f-6cb7-2f53-93fb2906dd7b" title="Guest" subject="高亮" date="D:20250325190716+08'00'" creationdate="D:20250325190716+08'00'" coords="124.92623999999999,214.60921874999997,467.6697600000003,214.60921874999997,124.92623999999999,204.25237500000003,467.6697600000003,204.25237500000003,56.64047999999998,199.36201500000004,456.4747200000001,199.36201500000004,56.64047999999998,189.35843999999997,456.4747200000001,189.35843999999997"><contents>中我们了解到消费者提交的位移是保存在 Kafka 内部的主题__consumer_offsets
中的，初始情况下这个主题并不存在，当第一次有消费者消费消息时会自动创建这个主题。</contents></highlight><highlight page="175" rect="56.640,139.807,467.783,164.939" color="#FFCD45" flags="print" name="eef2e3f4-5ad5-a07a-63a5-0403e1bd3409" title="Guest" subject="高亮" date="D:20250325190840+08'00'" creationdate="D:20250325190840+08'00'" coords="308.0408399999999,164.93869875000001,467.78286046874985,164.93869875000001,308.0408399999999,154.5974175,467.78286046874985,154.5974175,56.64047999999984,149.811015,436.5547199999999,149.811015,56.64047999999984,139.80744000000004,436.5547199999999,139.80744000000004"><contents>在创建主题的时候，如果当前 broker
中不止配置了一个根目录，那么会挑选分区数最少的那个根目录来完成本次创建任务。</contents></highlight><highlight page="176" rect="56.622,184.330,467.611,209.811" color="#FFCD45" flags="print" name="07975154-7397-59b8-a1e3-d2f3e7b6eddb" title="Guest" subject="高亮" date="D:20250325190944+08'00'" creationdate="D:20250325190944+08'00'" coords="76.66152000000001,209.811015,467.61144000000013,209.811015,76.66152000000001,199.80743999999999,467.61144000000013,199.80743999999999,56.622000000000014,194.33317499999998,116.62104,194.33317499999998,56.622000000000014,184.32959999999997,116.62104,184.32959999999997"><contents>每个分区由内部的每一条消息组成，如果消息格式设计得不够精炼，那么其功能和性能都
会大打折扣。</contents></highlight><highlight page="176" rect="56.622,106.821,467.741,147.780" color="#FFCD45" flags="print" name="63a6beca-d16c-e3d9-15b2-7aaa7c688838" title="Guest" subject="高亮" date="D:20250325191129+08'00'" creationdate="D:20250325191129+08'00'" coords="56.622,147.78013499999997,467.7309600000001,147.78013499999997,56.622,137.77656000000002,467.7309600000001,137.77656000000002,56.622,132.30229499999996,467.74092,132.30229499999996,56.622,122.29872,467.74092,122.29872,56.62199999999996,116.82445499999994,449.38464000000005,116.82445499999994,56.62199999999996,106.82087999999999,449.38464000000005,106.82087999999999"><contents>其影响了消息审计、端到端延迟、大数据应用等功能的扩展。虽然可以在消息体内部添加一个
时间戳，但解析变长的消息体会带来额外的开销，而存储在消息体（参考图 5-3 中的 value 字
段）前面可以通过指针偏移量获取其值而容易解析，进而减少了开销（可以查看 v1 版本）</contents></highlight><highlight page="177" rect="56.611,437.657,467.680,493.013" color="#FFCD45" flags="print" name="038873eb-5099-179a-5d66-c803b72b7f01" title="Guest" subject="高亮" date="D:20250325191328+08'00'" creationdate="D:20250325191328+08'00'" coords="337.5423599999999,493.01269874999997,467.67972,493.01269874999997,337.5423599999999,482.92819875,467.67972,482.92819875,56.62055999999989,478.05184499999996,467.49048,478.05184499999996,56.62055999999989,467.92843874999994,467.49048,467.92843874999994,56.61059999999991,463.01317874999995,467.61995999999994,463.01317874999995,56.61059999999991,452.92867874999996,467.61995999999994,452.92867874999996,56.62055999999989,447.97451249999995,306.45719999999994,447.97451249999995,56.62055999999989,437.656575,306.45719999999994,437.656575"><contents>因为每个 RECORD（v0 和 v1
版）必定对应一个 offset 和 message size。每条消息都有一个 offset 用来标志它在分
区中的偏移量，这个 offset 是逻辑值，而非实际物理偏移值，message size 表示消息的大
小，这两者在一起被称为日志头部（LOG_OVERHEAD）</contents></highlight><highlight page="177" rect="56.621,393.361,467.630,447.975" color="#FFCD45" flags="print" name="84f73576-6929-ceb6-fcdd-7265511954fd" title="Guest" subject="高亮" date="D:20250325191602+08'00'" creationdate="D:20250325191602+08'00'" coords="374.62343999999996,447.97451249999995,467.61995999999994,447.97451249999995,374.62343999999996,437.656575,467.61995999999994,437.656575,56.62055999999982,433.36381499999993,467.61995999999994,433.36381499999993,56.62055999999982,423.36024,467.61995999999994,423.36024,56.62055999999982,418.01389874999995,467.62991999999986,418.01389874999995,56.62055999999982,407.65705499999996,467.62991999999986,407.65705499999996,56.6305199999998,403.36429499999997,216.94667999999984,403.36429499999997,56.6305199999998,393.3607199999999,216.94667999999984,393.3607199999999"><contents>LOG_OVERHEAD和
RECORD一起用来描述一条消息，为了配合陈述的语境，在讲述具体消息格式时会偏向于将单
纯的 RECORD 看作消息，而在其他地方则偏向于将 LOG_OVERHEAD 和 RECORD 的整体看
作消息，读者需要留意其中的区别。</contents></highlight><highlight page="177" rect="297.344,393.361,327.343,403.364" color="#FFCD45" flags="print" name="04565dd2-8bc7-6401-d033-8fe0ffb062ea" title="Guest" subject="高亮" date="D:20250325191619+08'00'" creationdate="D:20250325191619+08'00'" coords="297.3437999999999,403.36429499999997,327.34331999999984,403.36429499999997,297.3437999999999,393.3607199999999,327.34331999999984,393.3607199999999"><contents>消息集</contents></highlight><highlight page="177" rect="56.631,363.481,467.739,403.364" color="#FFCD45" flags="print" name="55f013b5-d394-fb81-7788-0cb369092763" title="Guest" subject="高亮" date="D:20250325191657+08'00'" creationdate="D:20250325191657+08'00'" coords="367.5418799999999,403.36429499999997,467.7394799999999,403.36429499999997,367.5418799999999,393.3607199999999,467.7394799999999,393.3607199999999,56.6305199999998,388.36453499999993,467.60999999999984,388.36453499999993,56.6305199999998,378.36096,467.60999999999984,378.36096,56.63051999999973,373.484295,136.54955999999973,373.484295,56.63051999999973,363.4807199999999,136.54955999999973,363.4807199999999"><contents>消息集中包含一条或多
条消息，消息集不仅是存储于磁盘及在网络上传输（Produce &amp; Fetch）的基本形式，而且是Kafka
中压缩的基本单元</contents></highlight><highlight page="178" rect="76.680,580.316,461.514,590.319" color="#FFCD45" flags="print" name="b12822bd-3fca-a121-349a-4ff7b5831ebd" title="Guest" subject="高亮" date="D:20250325191821+08'00'" creationdate="D:20250325191821+08'00'" coords="76.67999999999999,590.319375,461.5144800000001,590.319375,76.67999999999999,580.3158,461.5144800000001,580.3158"><contents>下面具体陈述一下消息格式中的各个字段，从 crc32 开始算起，各个字段的解释如下。</contents></highlight><highlight page="178" rect="96.590,542.694,360.709,552.779" color="#FFCD45" flags="print" name="70c0e1c2-4d92-0d88-8f92-73e0925028d4" title="Guest" subject="高亮" date="D:20250325191827+08'00'" creationdate="D:20250325191827+08'00'" coords="96.59004000000002,552.77857875,360.70932000000005,552.77857875,96.59004000000002,542.69407875,360.70932000000005,542.69407875"><contents>magic（1B）：消息格式版本号，此版本的 magic 值为 0。</contents></highlight><highlight page="178" rect="176.459,402.309,358.160,413.249" color="#FFCD45" flags="print" name="91db5aaa-00e2-d222-2f39-1f248c329c90" title="Guest" subject="高亮" date="D:20250325192508+08'00'" creationdate="D:20250325192508+08'00'" coords="176.4592800000001,413.24893875,358.1595600000001,413.24893875,176.4592800000001,402.30850124999995,358.1595600000001,402.30850124999995"><contents>可以为空，比如墓碑（tombstone）消息。</contents></highlight><highlight page="178" rect="56.591,354.045,467.710,379.215" color="#FFCD45" flags="print" name="3ba09307-5165-5868-414d-a9673115bc6a" title="Guest" subject="高亮" date="D:20250325192749+08'00'" creationdate="D:20250325192749+08'00'" coords="355.27116000000007,379.2146849999999,467.7096000000001,379.2146849999999,355.27116000000007,368.81893499999995,467.7096000000001,368.81893499999995,56.590680000000035,364.048095,375.66924000000006,364.048095,56.590680000000035,354.04452,375.66924000000006,354.04452"><contents>v0 版本中一条消息的最小
长度为 14B，如果小于这个值，那么这就是一条破损的消息而不被接收。</contents></highlight><highlight page="179" rect="56.621,77.657,472.670,118.969" color="#FFCD45" flags="print" name="8a12bd43-d0b7-8440-66d0-338e1e30606e" title="Guest" subject="高亮" date="D:20250325193228+08'00'" creationdate="D:20250325193228+08'00'" coords="212.99256000000003,118.96921874999998,467.6199600000001,118.96921874999998,212.99256000000003,108.88471875000005,467.6199600000001,108.88471875000005,56.62056000000003,103.49137874999997,472.66967999999997,103.49137874999997,56.62056000000003,93.40687875000003,472.66967999999997,93.40687875000003,56.63052000000001,88.01353874999995,328.65804,88.01353874999995,56.63052000000001,77.65669500000001,328.65804,77.65669500000001"><contents>。v1 版本的 attributes 字段中的低 3 位和 v0 版本的一
样，还是表示压缩类型，而第4个位（bit）也被利用了起来：0表示timestamp类型为CreateTime，
而 1 表示 timestamp 类型为 LogAppendTime，其他位保留。</contents></highlight><highlight page="179" rect="56.621,62.451,467.620,88.014" color="#FFCD45" flags="print" name="a0b9a719-a34b-96af-3e3c-b4a55da45122" title="Guest" subject="高亮" date="D:20250325193257+08'00'" creationdate="D:20250325193242+08'00'" coords="328.65804,88.01353874999995,467.61996,88.01353874999995,328.65804,77.65669500000001,467.61996,77.65669500000001,56.62055999999989,72.53569874999994,257.9818799999999,72.53569874999994,56.62055999999989,62.45119875,257.9818799999999,62.45119875"><contents>timestamp 类型由 broker 端参
数 log.message.timestamp.type 来配置</contents></highlight><highlight page="180" rect="56.631,373.440,467.640,414.399" color="#FFCD45" flags="print" name="d93ffb8f-92ed-5cc5-8699-c98283fc11e6" title="Guest" subject="高亮" date="D:20250325193519+08'00'" creationdate="D:20250325193445+08'00'" coords="76.67999999999999,414.399375,467.63988000000006,414.399375,76.67999999999999,404.3958,467.63988000000006,404.3958,56.64047999999998,398.921535,467.6299200000001,398.921535,56.64047999999998,388.91796000000005,467.6299200000001,388.91796000000005,56.63051999999999,383.44369500000005,86.51051999999999,383.44369500000005,56.63051999999999,373.44012000000004,86.51051999999999,373.44012000000004"><contents>常见的压缩算法是数据量越大压缩效果越好，一条消息通常不会太大，这就导致压缩效果
并不是太好。而 Kafka 实现的压缩方式是将多条消息一起进行压缩，这样可以保证较好的压缩
效果。</contents></highlight><highlight page="180" rect="56.631,342.484,467.739,383.444" color="#FFCD45" flags="print" name="5c0ec468-e58f-13f5-cd05-b428155c847f" title="Guest" subject="高亮" date="D:20250325193626+08'00'" creationdate="D:20250325193626+08'00'" coords="156.58908,383.44369500000005,467.62991999999997,383.44369500000005,156.58908,373.44012000000004,467.62991999999997,373.44012000000004,56.630519999999976,367.96585500000003,467.73948000000007,367.96585500000003,56.630519999999976,357.96228,467.73948000000007,357.96228,56.630519999999976,352.488015,96.47051999999998,352.488015,56.630519999999976,342.48444,96.47051999999998,342.48444"><contents>生产者发送的压缩数据在 broker 中也是保持压缩状态进行存储的，消费
者从服务端获取的也是压缩的消息，消费者在处理消息之前才会解压消息，这样保持了端到端
的压缩。</contents></highlight><highlight page="180" rect="56.640,276.638,472.680,333.413" color="#FFCD45" flags="print" name="d460030a-0aad-71ef-aebd-e8b50b7ae2d9" title="Guest" subject="高亮" date="D:20250325193705+08'00'" creationdate="D:20250325193704+08'00'" coords="76.67003999999997,333.41305875,467.74944000000005,333.41305875,76.67003999999997,323.32855875,467.74944000000005,323.32855875,56.640479999999954,317.93521875,472.67963999999995,317.93521875,56.640479999999954,307.57837500000005,472.67963999999995,307.57837500000005,56.64047999999991,302.45737875000003,467.63987999999995,302.45737875000003,56.64047999999991,292.37287875000004,467.63987999999995,292.37287875000004,56.64047999999991,286.97953875,213.7196399999999,286.97953875,56.64047999999991,276.6382575,213.7196399999999,276.6382575"><contents>Kafka 日志中使用哪种压缩方式是通过参数 compression.type 来配置的，默认值为
“producer”，表示保留生产者使用的压缩方式。这个参数还可以配置为“gzip”“snappy”“lz4”，
分别对应 GZIP、SNAPPY、LZ4 这 3 种压缩算法。如果参数 compression.type 配置为
“uncompressed”，则表示不压缩。</contents></highlight><highlight page="180" rect="56.640,237.739,472.799,264.075" color="#FFCD45" flags="print" name="9a9dbb3c-b817-192e-9cea-fa5502a49e7a" title="Guest" subject="高亮" date="D:20250325193746+08'00'" creationdate="D:20250325193746+08'00'" coords="121.55976,264.07548,472.79916000000003,264.07548,121.55976,253.21908000000002,472.79916000000003,253.21908000000002,56.64,248.59548,318.35892000000007,248.59548,56.64,237.73908,318.35892000000007,237.73908"><contents>压缩率是压缩后的大小与压缩前的对比。例如：把100MB的文件压缩后是90MB，
压缩率为 90/100×100%=90%，压缩率越小，压缩效果越好。</contents></highlight><highlight page="180" rect="56.640,183.495,467.630,209.679" color="#FFCD45" flags="print" name="5eb31b62-2537-be68-d8e7-c520ea2f60d3" title="Guest" subject="高亮" date="D:20250325193907+08'00'" creationdate="D:20250325193907+08'00'" coords="237.11568,209.679375,467.6299200000001,209.679375,237.11568,199.67579999999998,467.6299200000001,199.67579999999998,56.64048,193.85137874999998,398.3680800000001,193.85137874999998,56.64048,183.49453500000004,398.3680800000001,183.49453500000004"><contents>当消息压缩时是将整个消息集进行压缩作为内层消息
（inner message），内层消息整体作为外层（wrapper message）的 value，</contents></highlight><highlight page="180" rect="56.621,133.944,467.710,159.778" color="#FFCD45" flags="print" name="f1a0623b-d7a8-e5eb-59c7-3eb7549356f6" title="Guest" subject="高亮" date="D:20250325193956+08'00'" creationdate="D:20250325193956+08'00'" coords="76.67004000000007,159.77821875,467.7096,159.77821875,76.67004000000007,149.421375,467.7096,149.421375,56.62056000000003,144.33928500000002,374.6334000000002,144.33928500000002,56.62056000000003,133.943535,374.6334000000002,133.943535"><contents>压缩后的外层消息（wrapper message）中的 key 为 null，所以图 5-5 左半部分没有画出 key
字段，value 字段中保存的是多条压缩消息（inner message，内层消息）</contents></highlight><highlight page="180" rect="56.631,103.572,467.620,129.173" color="#FFCD45" flags="print" name="b6a68447-ae37-e180-dbf8-21a10490666e" title="Guest" subject="高亮" date="D:20250325194052+08'00'" creationdate="D:20250325194052+08'00'" coords="227.02619999999996,129.17269499999998,467.61996,129.17269499999998,227.02619999999996,119.16912000000002,467.61996,119.16912000000002,56.63051999999992,113.575335,250.20607687499995,113.575335,56.63051999999992,103.57176000000004,250.20607687499995,103.57176000000004"><contents>当生产者创建压缩消息的时候，对内部压缩消息设置的
offset 从 0 开始为每个内部消息分配 offset</contents></highlight><highlight page="181" rect="56.631,126.603,467.749,183.159" color="#FFCD45" flags="print" name="fa83abde-9ecd-a2a5-32a7-651bf8f5df9b" title="Guest" subject="高亮" date="D:20250325194244+08'00'" creationdate="D:20250325194212+08'00'" coords="76.67999999999999,183.15937499999995,467.74944000000005,183.15937499999995,76.67999999999999,173.1558,467.74944000000005,173.1558,56.63051999999994,167.681535,467.62991999999997,167.681535,56.63051999999994,157.67795999999998,467.62991999999997,157.67795999999998,56.63051999999994,152.20369499999993,467.74944,152.20369499999993,56.63051999999994,142.20011999999997,467.74944,142.20011999999997,56.63051999999994,136.60633499999994,86.51051999999994,136.60633499999994,56.63051999999994,126.60275999999999,86.51051999999994,126.60275999999999"><contents>其实每个从生产者发出的消息集中的消息 offset 都是从 0 开始的，当然这个 offset 不能直接
存储在日志文件中，对 offset 的转换是在服务端进行的，客户端不需要做这个工作。外层消息
保存了内层消息中最后一条消息的绝对位移（absolute offset），绝对位移是相对于整个分区而
言的。</contents></highlight><highlight page="182" rect="56.631,516.718,467.749,542.199" color="#FFCD45" flags="print" name="63c2d286-1225-121f-ce6c-51289710a0c4" title="Guest" subject="高亮" date="D:20250325194414+08'00'" creationdate="D:20250325194414+08'00'" coords="76.67999999999999,542.199375,467.74944000000005,542.199375,76.67999999999999,532.1958,467.74944000000005,532.1958,56.63052000000001,526.721535,156.46956000000003,526.721535,56.63052000000001,516.71796,156.46956000000003,516.71796"><contents>注意这里的 RO 是前面的消息相对最后一条消息的 IO 而言的，所以其值小于等于 0，0 表
示最后一条消息自身。</contents></highlight><highlight page="182" rect="208.082,373.612,434.881,383.696" color="#FFCD45" flags="print" name="73833a5b-5eb2-062a-7377-1cf063ff96c0" title="Guest" subject="高亮" date="D:20250325201705+08'00'" creationdate="D:20250325201705+08'00'" coords="208.08228000000003,383.69605875,434.8814400000001,383.69605875,208.08228000000003,373.61155875,434.8814400000001,373.61155875"><contents>CreateTime，那么设置的是内层消息中最大的时间戳</contents></highlight><highlight page="182" rect="208.082,354.744,472.690,365.101" color="#FFCD45" flags="print" name="76e0dab7-e14e-5140-9ff8-4512bf6ac2cc" title="Guest" subject="高亮" date="D:20250325201723+08'00'" creationdate="D:20250325201723+08'00'" coords="208.08228000000003,365.10073875,472.68960000000004,365.10073875,208.08228000000003,354.743895,472.68960000000004,354.743895"><contents>LogAppendTime，那么设置的是Kafka 服务器当前的时间戳。</contents></highlight><highlight page="182" rect="169.926,317.826,307.543,327.910" color="#FFCD45" flags="print" name="08bb8b73-0a45-0529-b6ae-39452580e498" title="Guest" subject="高亮" date="D:20250325201744+08'00'" creationdate="D:20250325201744+08'00'" coords="169.9255199999999,327.91009875,307.54283999999996,327.91009875,169.9255199999999,317.82559875,307.54283999999996,317.82559875"><contents>timestamp 类型是 CreateTime</contents></highlight><highlight page="182" rect="317.642,317.826,467.640,327.910" color="#FFCD45" flags="print" name="f96d77f1-2da5-cd81-3f3b-b5b0c3befd18" title="Guest" subject="高亮" date="D:20250325201751+08'00'" creationdate="D:20250325201751+08'00'" coords="317.6422799999999,327.91009875,467.63987999999995,327.91009875,317.6422799999999,317.82559875,467.63987999999995,317.82559875"><contents>那么设置的是生产者创建消息时的</contents></highlight><highlight page="182" rect="56.631,234.082,467.730,293.837" color="#FFCD45" flags="print" name="c7e33080-b9ac-0435-51b9-b6493392e94f" title="Guest" subject="高亮" date="D:20250325201846+08'00'" creationdate="D:20250325201846+08'00'" coords="169.3179599999999,293.83693874999994,467.6299199999999,293.83693874999994,169.3179599999999,283.480095,467.6299199999999,283.480095,96.59003999999985,278.58973499999996,146.50955999999985,278.58973499999996,96.59003999999985,268.58615999999995,146.50955999999985,268.58615999999995,76.67003999999984,259.64425874999995,467.72952000000004,259.64425874999995,76.67003999999984,249.55975875000001,467.72952000000004,249.55975875000001,56.6305199999998,244.12751249999997,232.43447999999984,244.12751249999997,56.6305199999998,234.08191875,232.43447999999984,234.08191875"><contents>timestamp 类型是 LogAppendTime，那么所有内层消息的时间戳都
会被忽略。
对 attributes 字段而言，它的 timestamp 位只在外层消息中设置，内层消息中的
timestamp 类型一直都是 CreateTime。</contents></highlight><highlight page="182" rect="56.635,91.087,467.614,116.219" color="#FFCD45" flags="print" name="d5bb7311-369e-3cab-6b48-0654eee79fd7" title="Guest" subject="高亮" date="D:20250325202654+08'00'" creationdate="D:20250325202654+08'00'" coords="137.39028000000005,116.21869875000004,467.61408000000006,116.21869875000004,137.39028000000005,105.86185499999999,467.61408000000006,105.86185499999999,56.634600000000006,101.09101499999997,196.19412000000005,101.09101499999997,56.634600000000006,91.08744000000002,196.19412000000005,91.08744000000002"><contents>个字节都有一个位于最高位的 msb 位（most significant bit），除最后一个字
节外，其余 msb 位都设置为 1，</contents></highlight><highlight page="183" rect="56.630,549.360,467.749,590.319" color="#FFCD45" flags="print" name="a55170ff-a60c-ab20-7581-9d6e58ae9e87" title="Guest" subject="高亮" date="D:20250325202731+08'00'" creationdate="D:20250325202731+08'00'" coords="216.35856,590.319375,467.6394,590.319375,216.35856,580.3158,467.6394,580.3158,56.640000000000036,574.841535,467.7489600000001,574.841535,56.640000000000036,564.83796,467.7489600000001,564.83796,56.63004000000009,559.363695,218.3904000000001,559.363695,56.63004000000009,549.3601199999999,218.3904000000001,549.3601199999999"><contents>除 msb 位外，剩余的 7 位用于存储数据本身，这种表示类
型又称为 Base 128。通常而言，一个字节 8 位可以表示 256 个值，所以称为 Base 256，而这里
只能用 7 位表示，2 的 7 次方即 128。</contents></highlight></annots><pages><defmtx matrix="1,0,0,-1,0,666.14"/><pgmtx matrix="1,0,0,-1,0,666.24" page="2"/><pgmtx matrix="1,0,0,-1,0,666.24" page="3"/><pgmtx matrix="1,0,0,-1,0,666.24" page="4"/><pgmtx matrix="1,0,0,-1,0,666.24" page="5"/><pgmtx matrix="1,0,0,-1,0,666.24" page="6"/><pgmtx matrix="1,0,0,-1,0,666.24" page="7"/><pgmtx matrix="1,0,0,-1,0,666.24" page="8"/><pgmtx matrix="1,0,0,-1,0,666.24" page="9"/><pgmtx matrix="1,0,0,-1,0,666.24" page="10"/><pgmtx matrix="1,0,0,-1,0,666.24" page="11"/><pgmtx matrix="1,0,0,-1,0,666.24" page="12"/><pgmtx matrix="1,0,0,-1,0,666.24" page="13"/><pgmtx matrix="1,0,0,-1,0,666.24" page="14"/><pgmtx matrix="1,0,0,-1,0,666.24" page="15"/><pgmtx matrix="1,0,0,-1,0,666.24" page="16"/><pgmtx matrix="1,0,0,-1,0,666.24" page="17"/><pgmtx matrix="1,0,0,-1,0,666.24" page="18"/><pgmtx matrix="1,0,0,-1,0,666.24" page="19"/><pgmtx matrix="1,0,0,-1,0,666.24" page="20"/><pgmtx matrix="1,0,0,-1,0,666.24" page="21"/><pgmtx matrix="1,0,0,-1,0,666.24" page="22"/><pgmtx matrix="1,0,0,-1,0,666.24" page="23"/><pgmtx matrix="1,0,0,-1,0,666.24" page="24"/><pgmtx matrix="1,0,0,-1,0,666.24" page="25"/><pgmtx matrix="1,0,0,-1,0,666.24" page="26"/><pgmtx matrix="1,0,0,-1,0,666.24" page="27"/><pgmtx matrix="1,0,0,-1,0,666.24" page="28"/><pgmtx matrix="1,0,0,-1,0,666.24" page="29"/><pgmtx matrix="1,0,0,-1,0,666.24" page="30"/><pgmtx matrix="1,0,0,-1,0,666.24" page="31"/><pgmtx matrix="1,0,0,-1,0,666.24" page="32"/><pgmtx matrix="1,0,0,-1,0,666.24" page="33"/><pgmtx matrix="1,0,0,-1,0,666.24" page="34"/><pgmtx matrix="1,0,0,-1,0,666.24" page="35"/><pgmtx matrix="1,0,0,-1,0,666.24" page="36"/><pgmtx matrix="1,0,0,-1,0,666.24" page="37"/><pgmtx matrix="1,0,0,-1,0,666.24" page="38"/><pgmtx matrix="1,0,0,-1,0,666.24" page="39"/><pgmtx matrix="1,0,0,-1,0,666.24" page="40"/><pgmtx matrix="1,0,0,-1,0,666.24" page="41"/><pgmtx matrix="1,0,0,-1,0,666.24" page="42"/><pgmtx matrix="1,0,0,-1,0,666.24" page="43"/><pgmtx matrix="1,0,0,-1,0,666.24" page="44"/><pgmtx matrix="1,0,0,-1,0,666.24" page="45"/><pgmtx matrix="1,0,0,-1,0,666.24" page="46"/><pgmtx matrix="1,0,0,-1,0,666.24" page="47"/><pgmtx matrix="1,0,0,-1,0,666.24" page="48"/><pgmtx matrix="1,0,0,-1,0,666.24" page="49"/><pgmtx matrix="1,0,0,-1,0,666.24" page="50"/><pgmtx matrix="1,0,0,-1,0,666.24" page="51"/><pgmtx matrix="1,0,0,-1,0,666.24" page="52"/><pgmtx matrix="1,0,0,-1,0,666.24" page="53"/><pgmtx matrix="1,0,0,-1,0,666.24" page="54"/><pgmtx matrix="1,0,0,-1,0,666.24" page="55"/><pgmtx matrix="1,0,0,-1,0,666.24" page="56"/><pgmtx matrix="1,0,0,-1,0,666.24" page="57"/><pgmtx matrix="1,0,0,-1,0,666.24" page="58"/><pgmtx matrix="1,0,0,-1,0,666.24" page="59"/><pgmtx matrix="1,0,0,-1,0,666.24" page="60"/><pgmtx matrix="1,0,0,-1,0,666.24" page="61"/><pgmtx matrix="1,0,0,-1,0,666.24" page="62"/><pgmtx matrix="1,0,0,-1,0,666.24" page="63"/><pgmtx matrix="1,0,0,-1,0,666.24" page="64"/><pgmtx matrix="1,0,0,-1,0,666.24" page="65"/><pgmtx matrix="1,0,0,-1,0,666.24" page="66"/><pgmtx matrix="1,0,0,-1,0,666.24" page="67"/><pgmtx matrix="1,0,0,-1,0,666.24" page="68"/><pgmtx matrix="1,0,0,-1,0,666.24" page="69"/><pgmtx matrix="1,0,0,-1,0,666.24" page="70"/><pgmtx matrix="1,0,0,-1,0,666.24" page="71"/><pgmtx matrix="1,0,0,-1,0,666.24" page="72"/><pgmtx matrix="1,0,0,-1,0,666.24" page="73"/><pgmtx matrix="1,0,0,-1,0,666.24" page="74"/><pgmtx matrix="1,0,0,-1,0,666.24" page="75"/><pgmtx matrix="1,0,0,-1,0,666.24" page="76"/><pgmtx matrix="1,0,0,-1,0,666.24" page="77"/><pgmtx matrix="1,0,0,-1,0,666.24" page="78"/><pgmtx matrix="1,0,0,-1,0,666.24" page="79"/><pgmtx matrix="1,0,0,-1,0,666.24" page="80"/><pgmtx matrix="1,0,0,-1,0,666.24" page="81"/><pgmtx matrix="1,0,0,-1,0,666.24" page="82"/><pgmtx matrix="1,0,0,-1,0,666.24" page="83"/><pgmtx matrix="1,0,0,-1,0,666.24" page="84"/><pgmtx matrix="1,0,0,-1,0,666.24" page="85"/><pgmtx matrix="1,0,0,-1,0,666.24" page="86"/><pgmtx matrix="1,0,0,-1,0,666.24" page="87"/><pgmtx matrix="1,0,0,-1,0,666.24" page="88"/><pgmtx matrix="1,0,0,-1,0,666.24" page="89"/><pgmtx matrix="1,0,0,-1,0,666.24" page="90"/><pgmtx matrix="1,0,0,-1,0,666.24" page="91"/><pgmtx matrix="1,0,0,-1,0,666.24" page="92"/><pgmtx matrix="1,0,0,-1,0,666.24" page="93"/><pgmtx matrix="1,0,0,-1,0,666.24" page="94"/><pgmtx matrix="1,0,0,-1,0,666.24" page="95"/><pgmtx matrix="1,0,0,-1,0,666.24" page="96"/><pgmtx matrix="1,0,0,-1,0,666.24" page="97"/><pgmtx matrix="1,0,0,-1,0,666.24" page="98"/><pgmtx matrix="1,0,0,-1,0,666.24" page="99"/><pgmtx matrix="1,0,0,-1,0,666.24" page="100"/><pgmtx matrix="1,0,0,-1,0,666.24" page="101"/><pgmtx matrix="1,0,0,-1,0,666.24" page="102"/><pgmtx matrix="1,0,0,-1,0,666.24" page="103"/><pgmtx matrix="1,0,0,-1,0,666.24" page="104"/><pgmtx matrix="1,0,0,-1,0,666.24" page="105"/><pgmtx matrix="1,0,0,-1,0,666.24" page="106"/><pgmtx matrix="1,0,0,-1,0,666.24" page="107"/><pgmtx matrix="1,0,0,-1,0,666.24" page="108"/><pgmtx matrix="1,0,0,-1,0,666.24" page="109"/><pgmtx matrix="1,0,0,-1,0,666.24" page="110"/><pgmtx matrix="1,0,0,-1,0,666.24" page="111"/><pgmtx matrix="1,0,0,-1,0,666.24" page="112"/><pgmtx matrix="1,0,0,-1,0,666.24" page="113"/><pgmtx matrix="1,0,0,-1,0,666.24" page="114"/><pgmtx matrix="1,0,0,-1,0,666.24" page="115"/><pgmtx matrix="1,0,0,-1,0,666.24" page="116"/><pgmtx matrix="1,0,0,-1,0,666.24" page="117"/><pgmtx matrix="1,0,0,-1,0,666.24" page="118"/><pgmtx matrix="1,0,0,-1,0,666.24" page="119"/><pgmtx matrix="1,0,0,-1,0,666.24" page="120"/><pgmtx matrix="1,0,0,-1,0,666.24" page="121"/><pgmtx matrix="1,0,0,-1,0,666.24" page="122"/><pgmtx matrix="1,0,0,-1,0,666.24" page="123"/><pgmtx matrix="1,0,0,-1,0,666.24" page="124"/><pgmtx matrix="1,0,0,-1,0,666.24" page="125"/><pgmtx matrix="1,0,0,-1,0,666.24" page="126"/><pgmtx matrix="1,0,0,-1,0,666.24" page="127"/><pgmtx matrix="1,0,0,-1,0,666.24" page="128"/><pgmtx matrix="1,0,0,-1,0,666.24" page="129"/><pgmtx matrix="1,0,0,-1,0,666.24" page="130"/><pgmtx matrix="1,0,0,-1,0,666.24" page="131"/><pgmtx matrix="1,0,0,-1,0,666.24" page="132"/><pgmtx matrix="1,0,0,-1,0,666.24" page="133"/><pgmtx matrix="1,0,0,-1,0,666.24" page="134"/><pgmtx matrix="1,0,0,-1,0,666.24" page="135"/><pgmtx matrix="1,0,0,-1,0,666.24" page="136"/><pgmtx matrix="1,0,0,-1,0,666.24" page="137"/><pgmtx matrix="1,0,0,-1,0,666.24" page="138"/><pgmtx matrix="1,0,0,-1,0,666.24" page="139"/><pgmtx matrix="1,0,0,-1,0,666.24" page="140"/><pgmtx matrix="1,0,0,-1,0,666.24" page="141"/><pgmtx matrix="1,0,0,-1,0,666.24" page="142"/><pgmtx matrix="1,0,0,-1,0,666.24" page="143"/><pgmtx matrix="1,0,0,-1,0,666.24" page="144"/><pgmtx matrix="1,0,0,-1,0,666.24" page="145"/><pgmtx matrix="1,0,0,-1,0,666.24" page="146"/><pgmtx matrix="1,0,0,-1,0,666.24" page="147"/><pgmtx matrix="1,0,0,-1,0,666.24" page="148"/><pgmtx matrix="1,0,0,-1,0,666.24" page="149"/><pgmtx matrix="1,0,0,-1,0,666.24" page="150"/><pgmtx matrix="1,0,0,-1,0,666.24" page="151"/><pgmtx matrix="1,0,0,-1,0,666.24" page="152"/><pgmtx matrix="1,0,0,-1,0,666.24" page="153"/><pgmtx matrix="1,0,0,-1,0,666.24" page="154"/><pgmtx matrix="1,0,0,-1,0,666.24" page="155"/><pgmtx matrix="1,0,0,-1,0,666.24" page="156"/><pgmtx matrix="1,0,0,-1,0,666.24" page="157"/><pgmtx matrix="1,0,0,-1,0,666.24" page="158"/><pgmtx matrix="1,0,0,-1,0,666.24" page="159"/><pgmtx matrix="1,0,0,-1,0,666.24" page="160"/><pgmtx matrix="1,0,0,-1,0,666.24" page="161"/><pgmtx matrix="1,0,0,-1,0,666.24" page="162"/><pgmtx matrix="1,0,0,-1,0,666.24" page="163"/><pgmtx matrix="1,0,0,-1,0,666.24" page="164"/><pgmtx matrix="1,0,0,-1,0,666.24" page="165"/><pgmtx matrix="1,0,0,-1,0,666.24" page="166"/><pgmtx matrix="1,0,0,-1,0,666.24" page="167"/><pgmtx matrix="1,0,0,-1,0,666.24" page="168"/><pgmtx matrix="1,0,0,-1,0,666.24" page="169"/><pgmtx matrix="1,0,0,-1,0,666.24" page="170"/><pgmtx matrix="1,0,0,-1,0,666.24" page="171"/><pgmtx matrix="1,0,0,-1,0,666.24" page="172"/><pgmtx matrix="1,0,0,-1,0,666.24" page="173"/><pgmtx matrix="1,0,0,-1,0,666.24" page="174"/><pgmtx matrix="1,0,0,-1,0,666.24" page="175"/><pgmtx matrix="1,0,0,-1,0,666.24" page="176"/><pgmtx matrix="1,0,0,-1,0,666.24" page="177"/><pgmtx matrix="1,0,0,-1,0,666.24" page="178"/><pgmtx matrix="1,0,0,-1,0,666.24" page="179"/><pgmtx matrix="1,0,0,-1,0,666.24" page="180"/><pgmtx matrix="1,0,0,-1,0,666.24" page="181"/><pgmtx matrix="1,0,0,-1,0,666.24" page="182"/><pgmtx matrix="1,0,0,-1,0,666.24" page="183"/><pgmtx matrix="1,0,0,-1,0,666.24" page="184"/><pgmtx matrix="1,0,0,-1,0,666.24" page="185"/><pgmtx matrix="1,0,0,-1,0,666.24" page="186"/><pgmtx matrix="1,0,0,-1,0,666.24" page="187"/><pgmtx matrix="1,0,0,-1,0,666.24" page="188"/><pgmtx matrix="1,0,0,-1,0,666.24" page="189"/><pgmtx matrix="1,0,0,-1,0,666.24" page="190"/><pgmtx matrix="1,0,0,-1,0,666.24" page="191"/><pgmtx matrix="1,0,0,-1,0,666.24" page="192"/><pgmtx matrix="1,0,0,-1,0,666.24" page="193"/><pgmtx matrix="1,0,0,-1,0,666.24" page="194"/><pgmtx matrix="1,0,0,-1,0,666.24" page="195"/><pgmtx matrix="1,0,0,-1,0,666.24" page="196"/><pgmtx matrix="1,0,0,-1,0,666.24" page="197"/><pgmtx matrix="1,0,0,-1,0,666.24" page="198"/><pgmtx matrix="1,0,0,-1,0,666.24" page="199"/><pgmtx matrix="1,0,0,-1,0,666.24" page="200"/><pgmtx matrix="1,0,0,-1,0,666.24" page="201"/><pgmtx matrix="1,0,0,-1,0,666.24" page="202"/><pgmtx matrix="1,0,0,-1,0,666.24" page="203"/><pgmtx matrix="1,0,0,-1,0,666.24" page="204"/><pgmtx matrix="1,0,0,-1,0,666.24" page="205"/><pgmtx matrix="1,0,0,-1,0,666.24" page="206"/><pgmtx matrix="1,0,0,-1,0,666.24" page="207"/><pgmtx matrix="1,0,0,-1,0,666.24" page="208"/><pgmtx matrix="1,0,0,-1,0,666.24" page="209"/><pgmtx matrix="1,0,0,-1,0,666.24" page="210"/><pgmtx matrix="1,0,0,-1,0,666.24" page="211"/><pgmtx matrix="1,0,0,-1,0,666.24" page="212"/><pgmtx matrix="1,0,0,-1,0,666.24" page="213"/><pgmtx matrix="1,0,0,-1,0,666.24" page="214"/><pgmtx matrix="1,0,0,-1,0,666.24" page="215"/><pgmtx matrix="1,0,0,-1,0,666.24" page="216"/><pgmtx matrix="1,0,0,-1,0,666.24" page="217"/><pgmtx matrix="1,0,0,-1,0,666.24" page="218"/><pgmtx matrix="1,0,0,-1,0,666.24" page="219"/><pgmtx matrix="1,0,0,-1,0,666.24" page="220"/><pgmtx matrix="1,0,0,-1,0,666.24" page="221"/><pgmtx matrix="1,0,0,-1,0,666.24" page="222"/><pgmtx matrix="1,0,0,-1,0,666.24" page="223"/><pgmtx matrix="1,0,0,-1,0,666.24" page="224"/><pgmtx matrix="1,0,0,-1,0,666.24" page="225"/><pgmtx matrix="1,0,0,-1,0,666.24" page="226"/><pgmtx matrix="1,0,0,-1,0,666.24" page="227"/><pgmtx matrix="1,0,0,-1,0,666.24" page="228"/><pgmtx matrix="1,0,0,-1,0,666.24" page="229"/><pgmtx matrix="1,0,0,-1,0,666.24" page="230"/><pgmtx matrix="1,0,0,-1,0,666.24" page="231"/><pgmtx matrix="1,0,0,-1,0,666.24" page="232"/><pgmtx matrix="1,0,0,-1,0,666.24" page="233"/><pgmtx matrix="1,0,0,-1,0,666.24" page="234"/><pgmtx matrix="1,0,0,-1,0,666.24" page="235"/><pgmtx matrix="1,0,0,-1,0,666.24" page="236"/><pgmtx matrix="1,0,0,-1,0,666.24" page="237"/><pgmtx matrix="1,0,0,-1,0,666.24" page="238"/><pgmtx matrix="1,0,0,-1,0,666.24" page="239"/><pgmtx matrix="1,0,0,-1,0,666.24" page="240"/><pgmtx matrix="1,0,0,-1,0,666.24" page="241"/><pgmtx matrix="1,0,0,-1,0,666.24" page="242"/><pgmtx matrix="1,0,0,-1,0,666.24" page="243"/><pgmtx matrix="1,0,0,-1,0,666.24" page="244"/><pgmtx matrix="1,0,0,-1,0,666.24" page="245"/><pgmtx matrix="1,0,0,-1,0,666.24" page="246"/><pgmtx matrix="1,0,0,-1,0,666.24" page="247"/><pgmtx matrix="1,0,0,-1,0,666.24" page="248"/><pgmtx matrix="1,0,0,-1,0,666.24" page="249"/><pgmtx matrix="1,0,0,-1,0,666.24" page="250"/><pgmtx matrix="1,0,0,-1,0,666.24" page="251"/><pgmtx matrix="1,0,0,-1,0,666.24" page="252"/><pgmtx matrix="1,0,0,-1,0,666.24" page="253"/><pgmtx matrix="1,0,0,-1,0,666.24" page="254"/><pgmtx matrix="1,0,0,-1,0,666.24" page="255"/><pgmtx matrix="1,0,0,-1,0,666.24" page="256"/><pgmtx matrix="1,0,0,-1,0,666.24" page="257"/><pgmtx matrix="1,0,0,-1,0,666.24" page="258"/><pgmtx matrix="1,0,0,-1,0,666.24" page="259"/><pgmtx matrix="1,0,0,-1,0,666.24" page="260"/><pgmtx matrix="1,0,0,-1,0,666.24" page="261"/><pgmtx matrix="1,0,0,-1,0,666.24" page="262"/><pgmtx matrix="1,0,0,-1,0,666.24" page="263"/><pgmtx matrix="1,0,0,-1,0,666.24" page="264"/><pgmtx matrix="1,0,0,-1,0,666.24" page="265"/><pgmtx matrix="1,0,0,-1,0,666.24" page="266"/><pgmtx matrix="1,0,0,-1,0,666.24" page="267"/><pgmtx matrix="1,0,0,-1,0,666.24" page="268"/><pgmtx matrix="1,0,0,-1,0,666.24" page="269"/><pgmtx matrix="1,0,0,-1,0,666.24" page="270"/><pgmtx matrix="1,0,0,-1,0,666.24" page="271"/><pgmtx matrix="1,0,0,-1,0,666.24" page="272"/><pgmtx matrix="1,0,0,-1,0,666.24" page="273"/><pgmtx matrix="1,0,0,-1,0,666.24" page="274"/><pgmtx matrix="1,0,0,-1,0,666.24" page="275"/><pgmtx matrix="1,0,0,-1,0,666.24" page="276"/><pgmtx matrix="1,0,0,-1,0,666.24" page="277"/><pgmtx matrix="1,0,0,-1,0,666.24" page="278"/><pgmtx matrix="1,0,0,-1,0,666.24" page="279"/><pgmtx matrix="1,0,0,-1,0,666.24" page="280"/><pgmtx matrix="1,0,0,-1,0,666.24" page="281"/><pgmtx matrix="1,0,0,-1,0,666.24" page="282"/><pgmtx matrix="1,0,0,-1,0,666.24" page="283"/><pgmtx matrix="1,0,0,-1,0,666.24" page="284"/><pgmtx matrix="1,0,0,-1,0,666.24" page="285"/><pgmtx matrix="1,0,0,-1,0,666.24" page="286"/><pgmtx matrix="1,0,0,-1,0,666.24" page="287"/><pgmtx matrix="1,0,0,-1,0,666.24" page="288"/><pgmtx matrix="1,0,0,-1,0,666.24" page="289"/><pgmtx matrix="1,0,0,-1,0,666.24" page="290"/><pgmtx matrix="1,0,0,-1,0,666.24" page="291"/><pgmtx matrix="1,0,0,-1,0,666.24" page="292"/><pgmtx matrix="1,0,0,-1,0,666.24" page="293"/><pgmtx matrix="1,0,0,-1,0,666.24" page="294"/><pgmtx matrix="1,0,0,-1,0,666.24" page="295"/><pgmtx matrix="1,0,0,-1,0,666.24" page="296"/><pgmtx matrix="1,0,0,-1,0,666.24" page="297"/><pgmtx matrix="1,0,0,-1,0,666.24" page="298"/><pgmtx matrix="1,0,0,-1,0,666.24" page="299"/><pgmtx matrix="1,0,0,-1,0,666.24" page="300"/><pgmtx matrix="1,0,0,-1,0,666.24" page="301"/><pgmtx matrix="1,0,0,-1,0,666.24" page="302"/><pgmtx matrix="1,0,0,-1,0,666.24" page="303"/><pgmtx matrix="1,0,0,-1,0,666.24" page="304"/><pgmtx matrix="1,0,0,-1,0,666.24" page="305"/><pgmtx matrix="1,0,0,-1,0,666.24" page="306"/><pgmtx matrix="1,0,0,-1,0,666.24" page="307"/><pgmtx matrix="1,0,0,-1,0,666.24" page="308"/><pgmtx matrix="1,0,0,-1,0,666.24" page="309"/><pgmtx matrix="1,0,0,-1,0,666.24" page="310"/><pgmtx matrix="1,0,0,-1,0,666.24" page="311"/><pgmtx matrix="1,0,0,-1,0,666.24" page="312"/><pgmtx matrix="1,0,0,-1,0,666.24" page="313"/><pgmtx matrix="1,0,0,-1,0,666.24" page="314"/><pgmtx matrix="1,0,0,-1,0,666.24" page="315"/><pgmtx matrix="1,0,0,-1,0,666.24" page="316"/><pgmtx matrix="1,0,0,-1,0,666.24" page="317"/><pgmtx matrix="1,0,0,-1,0,666.24" page="318"/><pgmtx matrix="1,0,0,-1,0,666.24" page="319"/><pgmtx matrix="1,0,0,-1,0,666.24" page="320"/><pgmtx matrix="1,0,0,-1,0,666.24" page="321"/><pgmtx matrix="1,0,0,-1,0,666.24" page="322"/><pgmtx matrix="1,0,0,-1,0,666.24" page="323"/><pgmtx matrix="1,0,0,-1,0,666.24" page="324"/><pgmtx matrix="1,0,0,-1,0,666.24" page="325"/><pgmtx matrix="1,0,0,-1,0,666.24" page="326"/><pgmtx matrix="1,0,0,-1,0,666.24" page="327"/><pgmtx matrix="1,0,0,-1,0,666.24" page="328"/><pgmtx matrix="1,0,0,-1,0,666.24" page="329"/><pgmtx matrix="1,0,0,-1,0,666.24" page="330"/><pgmtx matrix="1,0,0,-1,0,666.24" page="331"/><pgmtx matrix="1,0,0,-1,0,666.24" page="332"/><pgmtx matrix="1,0,0,-1,0,666.24" page="333"/><pgmtx matrix="1,0,0,-1,0,666.24" page="334"/><pgmtx matrix="1,0,0,-1,0,666.24" page="335"/><pgmtx matrix="1,0,0,-1,0,666.24" page="336"/><pgmtx matrix="1,0,0,-1,0,666.24" page="337"/><pgmtx matrix="1,0,0,-1,0,666.24" page="338"/><pgmtx matrix="1,0,0,-1,0,666.24" page="339"/><pgmtx matrix="1,0,0,-1,0,666.24" page="340"/><pgmtx matrix="1,0,0,-1,0,666.24" page="341"/><pgmtx matrix="1,0,0,-1,0,666.24" page="342"/><pgmtx matrix="1,0,0,-1,0,666.24" page="343"/><pgmtx matrix="1,0,0,-1,0,666.24" page="344"/><pgmtx matrix="1,0,0,-1,0,666.24" page="345"/><pgmtx matrix="1,0,0,-1,0,666.24" page="346"/><pgmtx matrix="1,0,0,-1,0,666.24" page="347"/><pgmtx matrix="1,0,0,-1,0,666.24" page="348"/><pgmtx matrix="1,0,0,-1,0,666.24" page="349"/><pgmtx matrix="1,0,0,-1,0,666.24" page="350"/><pgmtx matrix="1,0,0,-1,0,666.24" page="351"/><pgmtx matrix="1,0,0,-1,0,666.24" page="352"/><pgmtx matrix="1,0,0,-1,0,666.24" page="353"/><pgmtx matrix="1,0,0,-1,0,666.24" page="354"/><pgmtx matrix="1,0,0,-1,0,666.24" page="355"/><pgmtx matrix="1,0,0,-1,0,666.24" page="356"/><pgmtx matrix="1,0,0,-1,0,666.24" page="357"/><pgmtx matrix="1,0,0,-1,0,666.24" page="358"/><pgmtx matrix="1,0,0,-1,0,666.24" page="359"/><pgmtx matrix="1,0,0,-1,0,666.24" page="360"/><pgmtx matrix="1,0,0,-1,0,666.24" page="361"/><pgmtx matrix="1,0,0,-1,0,666.24" page="362"/><pgmtx matrix="1,0,0,-1,0,666.24" page="363"/><pgmtx matrix="1,0,0,-1,0,666.24" page="364"/><pgmtx matrix="1,0,0,-1,0,666.24" page="365"/><pgmtx matrix="1,0,0,-1,0,666.24" page="366"/><pgmtx matrix="1,0,0,-1,0,666.24" page="367"/><pgmtx matrix="1,0,0,-1,0,666.24" page="368"/><pgmtx matrix="1,0,0,-1,0,666.24" page="369"/><pgmtx matrix="1,0,0,-1,0,666.24" page="370"/><pgmtx matrix="1,0,0,-1,0,666.24" page="371"/><pgmtx matrix="1,0,0,-1,0,666.24" page="372"/><pgmtx matrix="1,0,0,-1,0,666.24" page="373"/><pgmtx matrix="1,0,0,-1,0,666.24" page="374"/><pgmtx matrix="1,0,0,-1,0,666.24" page="375"/><pgmtx matrix="1,0,0,-1,0,666.24" page="376"/><pgmtx matrix="1,0,0,-1,0,666.24" page="377"/><pgmtx matrix="1,0,0,-1,0,666.24" page="378"/><pgmtx matrix="1,0,0,-1,0,666.24" page="379"/><pgmtx matrix="1,0,0,-1,0,666.24" page="380"/><pgmtx matrix="1,0,0,-1,0,666.24" page="381"/><pgmtx matrix="1,0,0,-1,0,666.24" page="382"/><pgmtx matrix="1,0,0,-1,0,666.24" page="383"/><pgmtx matrix="1,0,0,-1,0,666.24" page="384"/><pgmtx matrix="1,0,0,-1,0,666.24" page="385"/><pgmtx matrix="1,0,0,-1,0,666.24" page="386"/><pgmtx matrix="1,0,0,-1,0,666.24" page="387"/><pgmtx matrix="1,0,0,-1,0,666.24" page="388"/><pgmtx matrix="1,0,0,-1,0,666.24" page="389"/><pgmtx matrix="1,0,0,-1,0,666.24" page="390"/><pgmtx matrix="1,0,0,-1,0,666.24" page="391"/><pgmtx matrix="1,0,0,-1,0,666.24" page="392"/><pgmtx matrix="1,0,0,-1,0,666.24" page="393"/><pgmtx matrix="1,0,0,-1,0,666.24" page="394"/><pgmtx matrix="1,0,0,-1,0,666.24" page="395"/><pgmtx matrix="1,0,0,-1,0,666.24" page="396"/><pgmtx matrix="1,0,0,-1,0,666.24" page="397"/><pgmtx matrix="1,0,0,-1,0,666.24" page="398"/><pgmtx matrix="1,0,0,-1,0,666.24" page="399"/><pgmtx matrix="1,0,0,-1,0,666.24" page="400"/><pgmtx matrix="1,0,0,-1,0,666.24" page="401"/><pgmtx matrix="1,0,0,-1,0,666.24" page="402"/><pgmtx matrix="1,0,0,-1,0,666.24" page="403"/><pgmtx matrix="1,0,0,-1,0,666.24" page="404"/><pgmtx matrix="1,0,0,-1,0,666.24" page="405"/><pgmtx matrix="1,0,0,-1,0,666.24" page="406"/><pgmtx matrix="1,0,0,-1,0,666.24" page="407"/><pgmtx matrix="1,0,0,-1,0,666.24" page="408"/><pgmtx matrix="1,0,0,-1,0,666.24" page="409"/><pgmtx matrix="1,0,0,-1,0,666.24" page="410"/><pgmtx matrix="1,0,0,-1,0,666.24" page="411"/><pgmtx matrix="1,0,0,-1,0,666.24" page="412"/><pgmtx matrix="1,0,0,-1,0,666.24" page="413"/><pgmtx matrix="1,0,0,-1,0,666.24" page="414"/><pgmtx matrix="1,0,0,-1,0,666.24" page="415"/><pgmtx matrix="1,0,0,-1,0,666.24" page="416"/><pgmtx matrix="1,0,0,-1,0,666.24" page="417"/><pgmtx matrix="1,0,0,-1,0,666.24" page="418"/><pgmtx matrix="1,0,0,-1,0,666.24" page="419"/><pgmtx matrix="1,0,0,-1,0,666.24" page="420"/><pgmtx matrix="1,0,0,-1,0,666.24" page="421"/><pgmtx matrix="1,0,0,-1,0,666.24" page="422"/><pgmtx matrix="1,0,0,-1,0,666.24" page="423"/><pgmtx matrix="1,0,0,-1,0,666.24" page="424"/><pgmtx matrix="1,0,0,-1,0,666.24" page="425"/><pgmtx matrix="1,0,0,-1,0,666.24" page="426"/><pgmtx matrix="1,0,0,-1,0,666.24" page="427"/><pgmtx matrix="1,0,0,-1,0,666.24" page="428"/><pgmtx matrix="1,0,0,-1,0,666.24" page="429"/><pgmtx matrix="1,0,0,-1,0,666.24" page="430"/><pgmtx matrix="1,0,0,-1,0,666.24" page="431"/><pgmtx matrix="1,0,0,-1,0,666.24" page="432"/><pgmtx matrix="1,0,0,-1,0,666.24" page="433"/><pgmtx matrix="1,0,0,-1,0,666.24" page="434"/><pgmtx matrix="1,0,0,-1,0,666.24" page="435"/><pgmtx matrix="1,0,0,-1,0,666.24" page="436"/><pgmtx matrix="1,0,0,-1,0,666.24" page="437"/><pgmtx matrix="1,0,0,-1,0,666.24" page="438"/><pgmtx matrix="1,0,0,-1,0,666.24" page="439"/><pgmtx matrix="1,0,0,-1,0,666.24" page="440"/><pgmtx matrix="1,0,0,-1,0,666.24" page="441"/><pgmtx matrix="1,0,0,-1,0,666.24" page="442"/><pgmtx matrix="1,0,0,-1,0,666.24" page="443"/><pgmtx matrix="1,0,0,-1,0,666.24" page="444"/><pgmtx matrix="1,0,0,-1,0,666.24" page="445"/><pgmtx matrix="1,0,0,-1,0,666.24" page="446"/><pgmtx matrix="1,0,0,-1,0,666.24" page="447"/><pgmtx matrix="1,0,0,-1,0,666.24" page="448"/><pgmtx matrix="1,0,0,-1,0,666.24" page="449"/><pgmtx matrix="1,0,0,-1,0,666.24" page="450"/><pgmtx matrix="1,0,0,-1,0,666.24" page="451"/><pgmtx matrix="1,0,0,-1,0,666.24" page="452"/><pgmtx matrix="1,0,0,-1,0,666.24" page="453"/><pgmtx matrix="1,0,0,-1,0,666.24" page="454"/><pgmtx matrix="1,0,0,-1,0,666.24" page="455"/><pgmtx matrix="1,0,0,-1,0,666.24" page="456"/><pgmtx matrix="1,0,0,-1,0,666.24" page="457"/></pages></xfdf>